apply plugin: 'android'

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.3"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"
    }
    signingConfigs {
        debug
        release
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "http://mente.github.io/facebook-api-android-aar"
    }
}

def googleApiClientVersion = "1.18.0-rc"

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(":shared")

    compile "com.google.guava:guava:16.+"

    // Support libraries
    compile "com.android.support:support-v4:19.+"
    compile "com.android.support:appcompat-v7:19.+"

    // Facebook SDK
    compile "com.facebook:facebook-android-sdk:3.7"

    // Client libraries
    compile "be.kuleuven.cs.chikwadraat:socialfridge-users:v1-+"
    compile "be.kuleuven.cs.chikwadraat:socialfridge-parties:v1-+"

    // Widgets

    /*
     * Google APIs
     */

    // Play Services
    compile "com.google.android.gms:play-services:4.3.+"

    // Google API client library
    compile(group: "com.google.api-client", name: "google-api-client", version: googleApiClientVersion) {
        // Exclude artifacts that the Android SDK/Runtime provides.
        exclude(group: "xpp3", module: "xpp3")
        exclude(group: "org.apache.httpcomponents", module: "httpclient")
        exclude(group: "junit", module: "junit")
        exclude(group: "com.google.android", module: "android")
    }
    // Android extensions for the Google API client library.
    compile(group: "com.google.api-client", name: "google-api-client-android",
            version: googleApiClientVersion) {
        // Exclude play services, since we"re not using this yet.
        exclude(group: "com.google.android.google-play-services", module: "google-play-services")
    }

    // GSON extensions for Google HTTP Client
    compile(group: "com.google.http-client", name: "google-http-client-gson",
            version: googleApiClientVersion)
}

// Signing
def propFile = file('signing.properties')
if (propFile.canRead()) {
    def Properties props = new Properties()
    props.load(new FileInputStream(propFile))
    if (props != null && props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD')) {
        android.signingConfigs.debug.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.debug.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.debug.keyAlias = props['DEBUG_KEY_ALIAS']
        android.signingConfigs.debug.keyPassword = props['DEBUG_KEY_PASSWORD']
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['RELEASE_KEY_ALIAS']
        android.signingConfigs.release.keyAlias = props['RELEASE_KEY_PASSWORD']
    } else {
        println 'signing.properties found but missing entries'
        android.buildTypes.debug.signingConfig = null
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.debug.signingConfig = null
    android.buildTypes.release.signingConfig = null
}